name: Build-Analyze-Deliver-Deploy
on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up  JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # - name: Dependencies Scan
      #   if: 1>2
      #   run: mvn clean verify -DskipTests -Pcve

      - name: Unit Testing
        run: mvn test -Put

      - name: Integration Testing
        run: mvn test -Pit

      - name: Quality Gate
        #votre travail
        #adapter : peut utiliser sonarcloud ou une instance distante
        run:  mvn clean verify sonar:sonar -Dsonar.organization=baamethgit -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.projectKey=baamethgit_ProjetAgilite2024

      - name: Check Quality Gate
        id: quality-gate-check
        #votre travail
        #verifier si la Quality Gate is ok
        run: |
          echo "${{ steps.quality-gate-check.outputs.project-status }}"
          echo "${{ steps.quality-gate-check.outputs.quality-gate-result }}"
          echo "Checking quality gate ... "

      - name: Package
        run: mvn -B package  -DskipTests=true

      - name: Login to Docker
        #votre travail
        #les trois prochaines etapes peuven etre fusionnees en une seule, le decoupe est volontaire pour plus de comprehension
        run: |
          docker login -u=${{secrets.DOCKER_USERNAME}} -p=${{ secrets.DOCKER_TOKEN}} docker.io

      - name: Build Docker image
        run: |
          docker build -t  ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:${{ github.sha }} -t  ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:latest  .   

      - name: Publish Docker image versions
        run: |
          docker push --all-tags  ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}

      #votre travail
      #se connecter a un serveur distant et deployer l'image docker que vous venez de builder
      - name: Login to my remote server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST
          echo 'success'
         
      - name: Stop docker container if running
        run: docker stop ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }} || true
      
      - name: Pull latest version
        run: docker pull ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:latest

      - name: Run latest version
        run: docker run -d --name todos -p 80:8080 ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:latest
      
      - name: Wait for deploy to finish
        #votre travail
        run: |
          echo "Wait 30s ... "
          sleep 30
          echo "deployment finished"

      - name: Check deploy
        #verifier si le deploiement s'est bien passe
        #votre travail
        # status_code=$(curl -s -o /dev/null -w "%{http_code}" http://$REMOTE_HOST:$REMOTE_PORT/cicd/_health)
          # if [ $status_code -eq 200 ]; then
          #   response=$(curl -s http://$REMOTE_HOST:$REMOTE_PORT/cicd/_health)
          #   if [[ $response == *"Welcome to my Todo app"* ]]; then
          #     echo "Deployment successful! Service is running with expected content."
          #   else
          #     echo "Deployment failed. Service is running but content does not match expectations."
          #     exit 1
          #   fi
          # else
          #   echo "Deployment failed. Service is not running as expected (HTTP code $status_code)."
          #   exit 1
          # fi
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
        run: |
          echo " 1) Run Get request <my_server_ip:my_port/cicd/_health> to check if service is running ...\n 2) Get request should return 200 with content <Welcome to my Todo app> ..."



